package examples.widgets;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTextPane;
import javax.swing.JToolBar;
import javax.swing.KeyStroke;
import javax.swing.TransferHandler;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 * Simple frame example illustrating colored text in a document contained in a
 * test pane
 * @author davidroussel
 */
public class ExampleFrame extends JFrame
{
	/**
	 * Serial ID (because {@link TransferHandler} is serializable)
	 */
	private static final long serialVersionUID = 6551228528005843492L;

	/**
	 * New line separator on this OS
	 */
	protected static String newline = System.getProperty("line.separator");

	/**
	 * "Red" button associated to a {@link RedAction} to add blue text
	 * to the {@link #document}
	 */
	private JButton redButton;

	/**
	 * "Blue" button associated to a {@link BlueAction} to add blue text
	 * to the {@link #document}
	 */
	private JButton blueButton;

	/**
	 * "Clear" button associated to a {@link ClearAction} to clear all
	 * text in the {@link #document}
	 */
	private JButton clearButton;

	/**
	 * Document to write in (to be extracted from {@link JTextPane})
	 * with a {@link JTextPane.getStyledDocument()})
	 */
	protected StyledDocument document;

	/**
	 * Style applied to the {@link #document}
	 */
	protected Style style;

	/**
	 * default color to use when writing in the {@link #document}
	 */
	protected Color defaultColor;

	/**
	 * Action to perform when red button is pushed
	 */
	private final Action redAction;

	/**
	 * Action to perform when blue button is pushed
	 */
	private final Action blueAction;

	/**
	 * Action to perform when clear button is pushed
	 */
	private final Action clearAction;

	/**
	 * Simple document frame constructor
	 * @throws HeadlessException when code that is dependent on a keyboard,
	 * display, or mouse is called in an environment that does not support a
	 * keyboard, display, or mouse
	 * @note This constructor is generated by Window Builder
	 */
	public ExampleFrame() throws HeadlessException
	{
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setTitle("Red Blue Example");
		redAction = new ColorAction(TextColor.RED);
		blueAction = new ColorAction(TextColor.BLUE);
		clearAction = new ClearAction();

		setPreferredSize(new Dimension(400, 200));

		JMenuBar menuBar = new JMenuBar();
		setJMenuBar(menuBar);

		JMenu menuActions = new JMenu("Actions");
		menuBar.add(menuActions);

		JMenuItem menuItemRed = new JMenuItem(redAction);
		menuActions.add(menuItemRed);

		JMenuItem menuItemBlue = new JMenuItem(blueAction);
		menuActions.add(menuItemBlue);

		JSeparator separator = new JSeparator();
		menuActions.add(separator);

		JMenuItem menuItemClear = new JMenuItem(clearAction);
		menuActions.add(menuItemClear);

		JToolBar toolBar = new JToolBar();
		toolBar.setFloatable(false);
		getContentPane().add(toolBar, BorderLayout.NORTH);

		redButton = new JButton(redAction);
		toolBar.add(redButton);

		blueButton = new JButton(blueAction);
		toolBar.add(blueButton);

		Component horizontalGlue = Box.createHorizontalGlue();
		toolBar.add(horizontalGlue);

		clearButton = new JButton(clearAction);
		toolBar.add(clearButton);

		JScrollPane scrollPane = new JScrollPane();
		getContentPane().add(scrollPane, BorderLayout.CENTER);

		JTextPane textPane = new JTextPane();
		textPane.setEditable(false);

		document = textPane.getStyledDocument();
		style = textPane.addStyle("New Style", null);
		defaultColor = StyleConstants.getForeground(style);

		scrollPane.setViewportView(textPane);
	}

	/**
	 * Adds specific text to the end of the {@link #document}
	 * @param text the text to add at the end of the {@link #document}
	 * @param color the color to use when adding text
	 */
	public void appendToDocument(String text, Color color)
	{
		StyleConstants.setForeground(style, color);

		try
		{
			document.insertString(document.getLength(), text
					+ newline, style);
		}
		catch (BadLocationException ex)
		{
			System.err.println("write at bad location");
			ex.printStackTrace();
		}

		StyleConstants.setForeground(style, defaultColor);
	}

	/*
	 * App's actions
	 * Action are useful since the same action can be invoked by several
	 * widgets such as a button or a menu item.
	 * Otherwise a simple anonymous ActionListener is enough
	 */

	/**
	 * Action to perform for clearing the #document
	 */
	private class ClearAction extends AbstractAction
	{
		/**
		 * Serial ID because enclosing class is serializable ?
		 */
		private static final long serialVersionUID = 1230611102424154617L;

		/**
		 * Constructor.
		 * Sets name, description, icons and also action's shortcut
		 */
		public ClearAction()
		{
			putValue(MNEMONIC_KEY, KeyEvent.VK_L);
			putValue(SMALL_ICON, new ImageIcon(ExampleFrame.class.getResource("/examples/icons/erase-16.png")));
			putValue(LARGE_ICON_KEY, new ImageIcon(ExampleFrame.class.getResource("/examples/icons/erase-32.png")));
			putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_L, InputEvent.META_MASK));
			putValue(NAME, "Clear");
			putValue(SHORT_DESCRIPTION, "Clears the document");
		}

		/**
		 * Action's performing: clears the #document
		 * @param e the event that triggered this action [not used]
		 */
		@Override
		public void actionPerformed(ActionEvent e)
		{
			try
			{
				document.remove(0, document.getLength());
			}
			catch (BadLocationException ex)
			{
				System.err.println("ClientFrame: clear doc: bad location");
				ex.printStackTrace();
			}
		}
	}

	/**
	 * Possible text colors enumeration
	 */
	private enum TextColor
	{
		RED,
		BLUE
	};

	/**
	 * Action to perform for inserting red or blue text in the #document
	 */
	private class ColorAction extends AbstractAction
	{
		/**
		 * Serial ID because enclosing class is serializable ?
		 */
		private static final long serialVersionUID = -195720259042829768L;

		/**
		 * The action name: "Red" or "Blue"
		 */
		private final String name;

		/**
		 * the color to apply
		 */
		private final Color color;

		/**
		 * Constructor.
		 * Sets the color for this action along with the action's name,
		 * description, icons and shortcut.
		 * @param textColor the text color of this action
		 */
		public ColorAction(TextColor textColor)
		{
			name = (textColor == TextColor.RED ? "Red" : "Blue");
			color = (textColor == TextColor.RED ? Color.RED : Color.BLUE);
			String scname = name.toLowerCase();

			int key = (textColor == TextColor.RED ? KeyEvent.VK_R : KeyEvent.VK_B);
			ImageIcon smallIcon = new ImageIcon(ExampleFrame.class.getResource("/examples/icons/bg_" + scname + "-16.png"));
			ImageIcon icon = new ImageIcon(ExampleFrame.class.getResource("/examples/icons/bg_" + scname + "-32.png"));
			String description = "Prints \"" + name + "\" in " + scname +" in the document";

			putValue(MNEMONIC_KEY, key);
			putValue(SMALL_ICON, smallIcon);
			putValue(LARGE_ICON_KEY, icon);
			putValue(ACCELERATOR_KEY, KeyStroke.getKeyStroke(key, InputEvent.META_MASK));
			putValue(NAME, name);
			putValue(SHORT_DESCRIPTION, description);
		}


		/**
		 * Action's performing: adds red or blue text at the end of
		 * the #document
		 * @param e the event that triggered this action [not used]
		 */
		@Override
		public void actionPerformed(ActionEvent e)
		{
			/*
			 * ColorAction is an internal class so has access to all
			 * internal members including the
			 * ExampleFrame#appendToDocument method
			 */
			appendToDocument(name, color);
		}
	}
}


