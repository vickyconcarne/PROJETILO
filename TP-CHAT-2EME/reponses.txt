Réponses aux question de la partie UML : 

- A quoi sert la classe AbstractRunChat ?

C'est la classe de base pour éxécuter le chat, client ou serveur. Elle définie les méthodes communes pour l'éxécution serveur et client. 

- Expliquez la relation ChatServer / InputOutputClient concrétisée par l’attribut « clients ».

Chatserver prend plusieurs clients dans l'attribut "clients" en prennant les instances de InputOutputClient. 

- Expliquez la relation ClientHandler / InputClient concrétisée par l’attribut « mainClient ».

Mainclient définit le client principal du thread pour gèrer ses messages en entrée. 

- Expliquez la relation ClientHandler / InputOutputClient concrétisée par l’attribut « allClients ».

"allclients" est un tableau de InputOutputClient de tous les clients connectés vers lesquels le thread envoie les messages du client principal.  

- Combien de threads tournent sur un serveur dans le scénario présenté par la Figure 1 (page 1) ? 
  Détaillez votre réponse en précisant qui lance qui.

3 coté serveur : 1 par client (client handler) et le principal.  

- Combien de threads tournent dans le Client 1 du scénario présenté par la Figure 1 (page 1) ?
  Détaillez votre réponse en précisant qui lance qui.

3 coté client : le user handler, le server handler et le principal. 

- A quoi sert le threads[i].join() à la fin du run de ChatClient ?

Il attend que le thread se finisse. 

- Que représente la classe ChatClient dans le cadre d’une architecture MVC ?

Elle représente le controleur. 
